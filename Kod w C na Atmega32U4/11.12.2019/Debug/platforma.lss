
platforma.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00000cf8  00000d8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011e  008001ca  008001ca  00000e56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001564  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de4  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000896  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c1  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085e  00000000  00000000  00004525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004d83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  64:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_25>
  68:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  6c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  70:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  74:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  78:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  7c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  80:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  84:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  88:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  8c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  90:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  94:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  98:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  9c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  a0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  a4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  a8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  ac:	07 63       	ori	r16, 0x37	; 55
  ae:	42 36       	cpi	r20, 0x62	; 98
  b0:	b7 9b       	sbis	0x16, 7	; 22
  b2:	d8 a7       	std	Y+40, r29	; 0x28
  b4:	1a 39       	cpi	r17, 0x9A	; 154
  b6:	68 56       	subi	r22, 0x68	; 104
  b8:	18 ae       	std	Y+56, r1	; 0x38
  ba:	ba ab       	std	Y+50, r27	; 0x32
  bc:	55 8c       	ldd	r5, Z+29	; 0x1d
  be:	1d 3c       	cpi	r17, 0xCD	; 205
  c0:	b7 cc       	rjmp	.-1682   	; 0xfffffa30 <__eeprom_end+0xff7efa30>
  c2:	57 63       	ori	r21, 0x37	; 55
  c4:	bd 6d       	ori	r27, 0xDD	; 221
  c6:	ed fd       	.word	0xfded	; ????
  c8:	75 3e       	cpi	r23, 0xE5	; 229
  ca:	f6 17       	cp	r31, r22
  cc:	72 31       	cpi	r23, 0x12	; 18
  ce:	bf 00       	.word	0x00bf	; ????
  d0:	00 00       	nop
  d2:	80 3f       	cpi	r24, 0xF0	; 240
  d4:	08 00       	.word	0x0008	; ????
  d6:	00 00       	nop
  d8:	be 92       	st	-X, r11
  da:	24 49       	sbci	r18, 0x94	; 148
  dc:	12 3e       	cpi	r17, 0xE2	; 226
  de:	ab aa       	std	Y+51, r10	; 0x33
  e0:	aa 2a       	or	r10, r26
  e2:	be cd       	rjmp	.-1156   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
  e4:	cc cc       	rjmp	.-1640   	; 0xfffffa7e <__eeprom_end+0xff7efa7e>
  e6:	4c 3e       	cpi	r20, 0xEC	; 236
  e8:	00 00       	nop
  ea:	00 80       	ld	r0, Z
  ec:	be ab       	std	Y+54, r27	; 0x36
  ee:	aa aa       	std	Y+50, r10	; 0x32
  f0:	aa 3e       	cpi	r26, 0xEA	; 234
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	bf 00       	.word	0x00bf	; ????
  f8:	00 00       	nop
  fa:	80 3f       	cpi	r24, 0xF0	; 240
  fc:	00 00       	nop
  fe:	00 00       	nop
 100:	00 08       	sbc	r0, r0
 102:	41 78       	andi	r20, 0x81	; 129
 104:	d3 bb       	out	0x13, r29	; 19
 106:	43 87       	std	Z+11, r20	; 0x0b
 108:	d1 13       	cpse	r29, r17
 10a:	3d 19       	sub	r19, r13
 10c:	0e 3c       	cpi	r16, 0xCE	; 206
 10e:	c3 bd       	out	0x23, r28	; 35
 110:	42 82       	std	Z+2, r4	; 0x02
 112:	ad 2b       	or	r26, r29
 114:	3e 68       	ori	r19, 0x8E	; 142
 116:	ec 82       	std	Y+4, r14	; 0x04
 118:	76 be       	out	0x36, r7	; 54
 11a:	d9 8f       	std	Y+25, r29	; 0x19
 11c:	e1 a9       	ldd	r30, Z+49	; 0x31
 11e:	3e 4c       	sbci	r19, 0xCE	; 206
 120:	80 ef       	ldi	r24, 0xF0	; 240
 122:	ff be       	out	0x3f, r15	; 63
 124:	01 c4       	rjmp	.+2050   	; 0x928 <__mulsf3_pse+0x3c>
 126:	ff 7f       	andi	r31, 0xFF	; 255
 128:	3f 00       	.word	0x003f	; ????
 12a:	00 00       	nop
	...

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	da e0       	ldi	r29, 0x0A	; 10
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	e8 ef       	ldi	r30, 0xF8	; 248
 142:	fc e0       	ldi	r31, 0x0C	; 12
 144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
 146:	05 90       	lpm	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	aa 3c       	cpi	r26, 0xCA	; 202
 14c:	b1 07       	cpc	r27, r17
 14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
 150:	22 e0       	ldi	r18, 0x02	; 2
 152:	aa ec       	ldi	r26, 0xCA	; 202
 154:	b1 e0       	ldi	r27, 0x01	; 1
 156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
 158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
 15a:	a8 3e       	cpi	r26, 0xE8	; 232
 15c:	b2 07       	cpc	r27, r18
 15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
 160:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
 164:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <_exit>

00000168 <__bad_interrupt>:
 168:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016c <adc_init>:
#include <avr/interrupt.h>
//#include <avr/sfr_defs.h>
#include "adc.h"
void adc_init(void)
{
	ADCSRA = (1<<ADEN) |(1<<ADPS0) |(1<<ADPS1)|(1<<ADPS2);// ustawienie preskalera na 128//ADEN=1 w³¹czenie przetwornika ADC)
 16c:	87 e8       	ldi	r24, 0x87	; 135
 16e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	ADMUX  =    (1<<REFS1) | (1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); 
 172:	87 ec       	ldi	r24, 0xC7	; 199
 174:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 178:	08 95       	ret

0000017a <adc_run_one>:

float adc_run_one(void)
{
	
	
	ADCSRA |= (1<<ADSC); //ADSC: uruchomienie pojedynczej konwersji
 17a:	ea e7       	ldi	r30, 0x7A	; 122
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //czeka na zakoñczenie konwersji  sprawdzanie flagi
 184:	80 81       	ld	r24, Z
 186:	86 fd       	sbrc	r24, 6
 188:	fd cf       	rjmp	.-6      	; 0x184 <adc_run_one+0xa>
	
	float result =(float)ADC * 2.56/1024;
 18a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 18e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	return result;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__floatunsisf>
 19a:	2a e0       	ldi	r18, 0x0A	; 10
 19c:	37 ed       	ldi	r19, 0xD7	; 215
 19e:	43 e2       	ldi	r20, 0x23	; 35
 1a0:	50 e4       	ldi	r21, 0x40	; 64
 1a2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e8       	ldi	r20, 0x80	; 128
 1ac:	5a e3       	ldi	r21, 0x3A	; 58
 1ae:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>
	
 1b2:	08 95       	ret

000001b4 <main>:
int b =0;
extern bufor_cykliczny buffer_TX;

int main(void)
{
inicjalizacja_mikrokontrolera(); 
 1b4:	0e 94 4a 01 	call	0x294	; 0x294 <inicjalizacja_mikrokontrolera>

Diagnostyka();
 1b8:	0e 94 3c 01 	call	0x278	; 0x278 <Diagnostyka>
 
    while (1) //W pêtki g³ónej bedzie odbywa³o sie skanowanie i wysy³anie raportu po uart 
				//zawierajace wszystkie odczytane parametry urzadzen
	{	
		
	 Skanuj();//sprawdza napiecie z wyj PWM
 1bc:	0e 94 26 01 	call	0x24c	; 0x24c <Skanuj>
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <main+0x8>

000001c2 <__vector_25>:
zczytywanie komendy do bufora konczy sie gdy napotkany zostaniew znak '/'


*/
ISR(USART1_RX_vect) //Przerwanie od przychodz¹cej komendy wyw gdy dana w UDR
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	
	
	if(b < 8)  // odbieranie komendy do bufora polecen
 1e4:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
 1e8:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__data_end+0x1>
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	91 05       	cpc	r25, r1
 1f0:	b4 f4       	brge	.+44     	; 0x21e <__vector_25+0x5c>
	{	
		RX_buf[b]= UDR1;
 1f2:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1f6:	fc 01       	movw	r30, r24
 1f8:	ec 52       	subi	r30, 0x2C	; 44
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	20 83       	st	Z, r18
		b++;	
 1fe:	9c 01       	movw	r18, r24
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__data_end+0x1>
 208:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__data_end>
	}
	
	 if ((b >= 8)||(RX_buf[b-1]== '/'))  //rozpoznano znak konca '/' 
 20c:	28 30       	cpi	r18, 0x08	; 8
 20e:	31 05       	cpc	r19, r1
 210:	34 f4       	brge	.+12     	; 0x21e <__vector_25+0x5c>
 212:	fc 01       	movw	r30, r24
 214:	ec 52       	subi	r30, 0x2C	; 44
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	80 81       	ld	r24, Z
 21a:	8f 32       	cpi	r24, 0x2F	; 47
 21c:	31 f4       	brne	.+12     	; 0x22a <__vector_25+0x68>
	{
		
		UART_Pobierz_rozkaz();
 21e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_Pobierz_rozkaz>
		b=0;
 222:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <__data_end+0x1>
 226:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__data_end>
		
	}
	

}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <Skanuj>:
*/
void Skanuj(void)								
{
						
//UART_raport();	//raport ze skanowania adc na razie tylko jednen rodzaj pomiaru
	Print_to_buf(&buffer_TX,ftoch(adc_run_one()));
 24c:	0e 94 bd 00 	call	0x17a	; 0x17a <adc_run_one>
 250:	0e 94 15 02 	call	0x42a	; 0x42a <ftoch>
 254:	bc 01       	movw	r22, r24
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 a8 02 	call	0x550	; 0x550 <Print_to_buf>
	Print_to_buf(&buffer_TX,"\n\r");
 25e:	6e e3       	ldi	r22, 0x3E	; 62
 260:	71 e0       	ldi	r23, 0x01	; 1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 a8 02 	call	0x550	; 0x550 <Print_to_buf>
 26a:	08 95       	ret

0000026c <UART_raport>:
	
}

void UART_raport(char *result)  //utworzenie raportu z poj wyniku pomiaru do wys³ania i wys³anie do bufora
{
	 Print_to_buf(&buffer_TX, result);  //buforowanie wynikow pomiaru 
 26c:	bc 01       	movw	r22, r24
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 a8 02 	call	0x550	; 0x550 <Print_to_buf>
 276:	08 95       	ret

00000278 <Diagnostyka>:
}

void Diagnostyka(void)  //selftest wszystkich urzadzen i raport po UART
{
	
UART_raport("Diagnostic devices on PCB..\n\r");
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 36 01 	call	0x26c	; 0x26c <UART_raport>
UART_raport("All devices work properly!\n\n\n\r");
 280:	82 e2       	ldi	r24, 0x22	; 34
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 36 01 	call	0x26c	; 0x26c <UART_raport>
UART_TX_bufor_wyslij(&buffer_TX);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <UART_TX_bufor_wyslij>
sei();
 290:	78 94       	sei
 292:	08 95       	ret

00000294 <inicjalizacja_mikrokontrolera>:


void inicjalizacja_mikrokontrolera(void)
{
	
	init_UART();
 294:	0e 94 09 02 	call	0x412	; 0x412 <init_UART>
	UART_raport("UART initialize...\n\r");
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 36 01 	call	0x26c	; 0x26c <UART_raport>
	
	/*timer2_init();
	PWM0_init();
	UART_raport("PWM initialize...\n\r");*/

	 adc_init();
 2a0:	0e 94 b6 00 	call	0x16c	; 0x16c <adc_init>
	UART_raport("ADC initialize...\n\r");
 2a4:	86 e5       	ldi	r24, 0x56	; 86
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 36 01 	call	0x26c	; 0x26c <UART_raport>

	
	
	UART_raport("Microkontroller initialized correctly!\n\r");
 2ac:	8a e6       	ldi	r24, 0x6A	; 106
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 36 01 	call	0x26c	; 0x26c <UART_raport>

	UART_TX_bufor_wyslij(&buffer_TX);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <UART_TX_bufor_wyslij>
 2bc:	08 95       	ret

000002be <chartofl>:
	
}


float chartofl(char * RX_buf)    //konwersja   char na float
{
 2be:	4f 92       	push	r4
 2c0:	5f 92       	push	r5
 2c2:	6f 92       	push	r6
 2c4:	7f 92       	push	r7
 2c6:	8f 92       	push	r8
 2c8:	9f 92       	push	r9
 2ca:	af 92       	push	r10
 2cc:	bf 92       	push	r11
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	dc 01       	movw	r26, r24
	float a=0;
	int o=0;

	while(RX_buf[o+1] !='.' )  //okreslenie ilosci miejsa ca³kowiotych
 2dc:	11 96       	adiw	r26, 0x01	; 1
 2de:	8c 91       	ld	r24, X
 2e0:	11 97       	sbiw	r26, 0x01	; 1
 2e2:	8e 32       	cpi	r24, 0x2E	; 46
 2e4:	89 f0       	breq	.+34     	; 0x308 <chartofl+0x4a>
 2e6:	fd 01       	movw	r30, r26
 2e8:	32 96       	adiw	r30, 0x02	; 2
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <chartofl+0x34>
	{
		o++;
 2f0:	9e 01       	movw	r18, r28
 2f2:	e9 01       	movw	r28, r18
 2f4:	21 96       	adiw	r28, 0x01	; 1
float chartofl(char * RX_buf)    //konwersja   char na float
{
	float a=0;
	int o=0;

	while(RX_buf[o+1] !='.' )  //okreslenie ilosci miejsa ca³kowiotych
 2f6:	91 91       	ld	r25, Z+
 2f8:	9e 32       	cpi	r25, 0x2E	; 46
 2fa:	d1 f7       	brne	.-12     	; 0x2f0 <chartofl+0x32>
	{
		o++;
		
	}

	for(int i=1;i <=o+5;i++)  //0 elem tabl to #
 2fc:	2a 5f       	subi	r18, 0xFA	; 250
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	12 16       	cp	r1, r18
 302:	13 06       	cpc	r1, r19
 304:	1c f0       	brlt	.+6      	; 0x30c <chartofl+0x4e>
 306:	43 c0       	rjmp	.+134    	; 0x38e <chartofl+0xd0>


float chartofl(char * RX_buf)    //konwersja   char na float
{
	float a=0;
	int o=0;
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	7d 01       	movw	r14, r26
 30e:	01 e0       	ldi	r16, 0x01	; 1
 310:	10 e0       	ldi	r17, 0x00	; 0
 312:	41 2c       	mov	r4, r1
 314:	51 2c       	mov	r5, r1
 316:	32 01       	movw	r6, r4

	for(int i=1;i <=o+5;i++)  //0 elem tabl to #
	{


		o--;
 318:	21 97       	sbiw	r28, 0x01	; 1
		if(RX_buf[i] =='.' )
 31a:	f7 01       	movw	r30, r14
 31c:	e0 0f       	add	r30, r16
 31e:	f1 1f       	adc	r31, r17
 320:	80 81       	ld	r24, Z
 322:	8e 32       	cpi	r24, 0x2E	; 46
 324:	11 f4       	brne	.+4      	; 0x32a <chartofl+0x6c>
		i++;
 326:	0f 5f       	subi	r16, 0xFF	; 255
 328:	1f 4f       	sbci	r17, 0xFF	; 255

		a += (RX_buf[i]-48)*pow(10,o) ;	
 32a:	be 01       	movw	r22, r28
 32c:	0d 2e       	mov	r0, r29
 32e:	00 0c       	add	r0, r0
 330:	88 0b       	sbc	r24, r24
 332:	99 0b       	sbc	r25, r25
 334:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__floatsisf>
 338:	9b 01       	movw	r18, r22
 33a:	ac 01       	movw	r20, r24
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e2       	ldi	r24, 0x20	; 32
 342:	91 e4       	ldi	r25, 0x41	; 65
 344:	0e 94 cd 04 	call	0x99a	; 0x99a <pow>
 348:	4b 01       	movw	r8, r22
 34a:	5c 01       	movw	r10, r24
 34c:	f7 01       	movw	r30, r14
 34e:	e0 0f       	add	r30, r16
 350:	f1 1f       	adc	r31, r17
 352:	60 81       	ld	r22, Z
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	60 53       	subi	r22, 0x30	; 48
 358:	71 09       	sbc	r23, r1
 35a:	07 2e       	mov	r0, r23
 35c:	00 0c       	add	r0, r0
 35e:	88 0b       	sbc	r24, r24
 360:	99 0b       	sbc	r25, r25
 362:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__floatsisf>
 366:	a5 01       	movw	r20, r10
 368:	94 01       	movw	r18, r8
 36a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>
 36e:	9b 01       	movw	r18, r22
 370:	ac 01       	movw	r20, r24
 372:	c3 01       	movw	r24, r6
 374:	b2 01       	movw	r22, r4
 376:	0e 94 be 02 	call	0x57c	; 0x57c <__addsf3>
 37a:	2b 01       	movw	r4, r22
 37c:	3c 01       	movw	r6, r24
	{
		o++;
		
	}

	for(int i=1;i <=o+5;i++)  //0 elem tabl to #
 37e:	0f 5f       	subi	r16, 0xFF	; 255
 380:	1f 4f       	sbci	r17, 0xFF	; 255
 382:	ce 01       	movw	r24, r28
 384:	05 96       	adiw	r24, 0x05	; 5
 386:	80 17       	cp	r24, r16
 388:	91 07       	cpc	r25, r17
 38a:	34 f6       	brge	.-116    	; 0x318 <chartofl+0x5a>
 38c:	03 c0       	rjmp	.+6      	; 0x394 <chartofl+0xd6>
 38e:	41 2c       	mov	r4, r1
 390:	51 2c       	mov	r5, r1
 392:	32 01       	movw	r6, r4

		a += (RX_buf[i]-48)*pow(10,o) ;	
	}

	return a;
}
 394:	c3 01       	movw	r24, r6
 396:	b2 01       	movw	r22, r4
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	9f 90       	pop	r9
 3aa:	8f 90       	pop	r8
 3ac:	7f 90       	pop	r7
 3ae:	6f 90       	pop	r6
 3b0:	5f 90       	pop	r5
 3b2:	4f 90       	pop	r4
 3b4:	08 95       	ret

000003b6 <UART_Pobierz_rozkaz>:

void UART_Pobierz_rozkaz(void)
{
	
	
	switch (RX_buf[0])
 3b6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <RX_buf>
 3ba:	83 32       	cpi	r24, 0x23	; 35
 3bc:	a9 f0       	breq	.+42     	; 0x3e8 <UART_Pobierz_rozkaz+0x32>
 3be:	8a 32       	cpi	r24, 0x2A	; 42
 3c0:	f9 f4       	brne	.+62     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
	case ('*'):  //odebrano rozkaz
	{
	
	 for(int i =1;((RX_buf[i] !='/')&&(i<5));i++)
 3c2:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RX_buf+0x1>
 3c6:	8f 32       	cpi	r24, 0x2F	; 47
 3c8:	d9 f0       	breq	.+54     	; 0x400 <__LOCK_REGION_LENGTH__>
	 {
		 arg[i] = RX_buf[i]; //przypisanie wartoci do zmiennych arg
 3ca:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <arg+0x1>
	switch (RX_buf[0])
	{
	case ('*'):  //odebrano rozkaz
	{
	
	 for(int i =1;((RX_buf[i] !='/')&&(i<5));i++)
 3ce:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <RX_buf+0x2>
 3d2:	8f 32       	cpi	r24, 0x2F	; 47
 3d4:	a9 f0       	breq	.+42     	; 0x400 <__LOCK_REGION_LENGTH__>
	 {
		 arg[i] = RX_buf[i]; //przypisanie wartoci do zmiennych arg
 3d6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <arg+0x2>
	switch (RX_buf[0])
	{
	case ('*'):  //odebrano rozkaz
	{
	
	 for(int i =1;((RX_buf[i] !='/')&&(i<5));i++)
 3da:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <RX_buf+0x3>
 3de:	8f 32       	cpi	r24, 0x2F	; 47
 3e0:	79 f0       	breq	.+30     	; 0x400 <__LOCK_REGION_LENGTH__>
	 {
		 arg[i] = RX_buf[i]; //przypisanie wartoci do zmiennych arg
 3e2:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <arg+0x3>
 3e6:	08 95       	ret
	  break;
	}
	 case ('#'):	//odebrano wartosc liczbowa
	 {
		 
		value= chartofl(RX_buf);
 3e8:	84 ed       	ldi	r24, 0xD4	; 212
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 5f 01 	call	0x2be	; 0x2be <chartofl>
 3f0:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <value>
 3f4:	70 93 dd 01 	sts	0x01DD, r23	; 0x8001dd <value+0x1>
 3f8:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <value+0x2>
 3fc:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <value+0x3>
 400:	08 95       	ret

00000402 <rsSndByte>:

void rsPrintfloat(float ff)  
{

	rsPrint(ftoch(ff));
	rsPrint("\n\r");
 402:	e8 ec       	ldi	r30, 0xC8	; 200
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	90 81       	ld	r25, Z
 408:	95 ff       	sbrs	r25, 5
 40a:	fd cf       	rjmp	.-6      	; 0x406 <rsSndByte+0x4>
 40c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 410:	08 95       	ret

00000412 <init_UART>:
 412:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 416:	80 e1       	ldi	r24, 0x10	; 16
 418:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 41c:	88 e9       	ldi	r24, 0x98	; 152
 41e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 428:	08 95       	ret

0000042a <ftoch>:
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	48 ec       	ldi	r20, 0xC8	; 200
 43a:	52 e4       	ldi	r21, 0x42	; 66
 43c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>
 440:	0e 94 9c 03 	call	0x738	; 0x738 <__fixsfsi>
 444:	fb 01       	movw	r30, r22
 446:	68 3c       	cpi	r22, 0xC8	; 200
 448:	71 05       	cpc	r23, r1
 44a:	ac f0       	brlt	.+42     	; 0x476 <ftoch+0x4c>
 44c:	24 e6       	ldi	r18, 0x64	; 100
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	c9 01       	movw	r24, r18
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	22 0f       	add	r18, r18
 460:	33 1f       	adc	r19, r19
 462:	28 0f       	add	r18, r24
 464:	39 1f       	adc	r19, r25
 466:	cf 01       	movw	r24, r30
 468:	b9 01       	movw	r22, r18
 46a:	0e 94 52 06 	call	0xca4	; 0xca4 <__divmodhi4>
 46e:	62 30       	cpi	r22, 0x02	; 2
 470:	71 05       	cpc	r23, r1
 472:	74 f7       	brge	.-36     	; 0x450 <ftoch+0x26>
 474:	02 c0       	rjmp	.+4      	; 0x47a <ftoch+0x50>
 476:	24 e6       	ldi	r18, 0x64	; 100
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	1e 16       	cp	r1, r30
 47c:	1f 06       	cpc	r1, r31
 47e:	7c f5       	brge	.+94     	; 0x4de <ftoch+0xb4>
 480:	c0 e0       	ldi	r28, 0x00	; 0
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	0f 2e       	mov	r0, r31
 486:	fe e2       	ldi	r31, 0x2E	; 46
 488:	ff 2e       	mov	r15, r31
 48a:	f0 2d       	mov	r31, r0
 48c:	0a e0       	ldi	r16, 0x0A	; 10
 48e:	10 e0       	ldi	r17, 0x00	; 0
 490:	2a 30       	cpi	r18, 0x0A	; 10
 492:	31 05       	cpc	r19, r1
 494:	29 f4       	brne	.+10     	; 0x4a0 <ftoch+0x76>
 496:	de 01       	movw	r26, r28
 498:	a0 52       	subi	r26, 0x20	; 32
 49a:	be 4f       	sbci	r27, 0xFE	; 254
 49c:	fc 92       	st	X, r15
 49e:	21 96       	adiw	r28, 0x01	; 1
 4a0:	cf 01       	movw	r24, r30
 4a2:	b9 01       	movw	r22, r18
 4a4:	0e 94 52 06 	call	0xca4	; 0xca4 <__divmodhi4>
 4a8:	80 e3       	ldi	r24, 0x30	; 48
 4aa:	86 0f       	add	r24, r22
 4ac:	de 01       	movw	r26, r28
 4ae:	a0 52       	subi	r26, 0x20	; 32
 4b0:	be 4f       	sbci	r27, 0xFE	; 254
 4b2:	8c 93       	st	X, r24
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	c0 97       	sbiw	r24, 0x30	; 48
 4b8:	82 9f       	mul	r24, r18
 4ba:	a0 01       	movw	r20, r0
 4bc:	83 9f       	mul	r24, r19
 4be:	50 0d       	add	r21, r0
 4c0:	92 9f       	mul	r25, r18
 4c2:	50 0d       	add	r21, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	e4 1b       	sub	r30, r20
 4c8:	f5 0b       	sbc	r31, r21
 4ca:	21 96       	adiw	r28, 0x01	; 1
 4cc:	c9 01       	movw	r24, r18
 4ce:	b8 01       	movw	r22, r16
 4d0:	0e 94 52 06 	call	0xca4	; 0xca4 <__divmodhi4>
 4d4:	9b 01       	movw	r18, r22
 4d6:	1e 16       	cp	r1, r30
 4d8:	1f 06       	cpc	r1, r31
 4da:	d4 f2       	brlt	.-76     	; 0x490 <ftoch+0x66>
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <ftoch+0xb8>
 4de:	c0 e0       	ldi	r28, 0x00	; 0
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
 4e2:	c0 52       	subi	r28, 0x20	; 32
 4e4:	de 4f       	sbci	r29, 0xFE	; 254
 4e6:	18 82       	st	Y, r1
 4e8:	80 ee       	ldi	r24, 0xE0	; 224
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	08 95       	ret

000004f8 <UART_TX_bufor_wyslij>:
			
			return 0; //bufor nie zosta³ jescze oprozniony
	}
	
void UART_TX_bufor_wyslij(bufor_cykliczny *q)
	{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	ec 01       	movw	r28, r24
		while(q->poczatek != q->koniec)
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	9a 81       	ldd	r25, Y+2	; 0x02
 502:	98 17       	cp	r25, r24
 504:	69 f0       	breq	.+26     	; 0x520 <UART_TX_bufor_wyslij+0x28>
		{
			q->koniec++; // Inkrementujemy indeks tail
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	8b 83       	std	Y+3, r24	; 0x03
			// Jeli by³ to ostatni element tablicy to ustawiamy wskanik na jej pocz¹tek
			if (q->koniec ==ROZMIAR)
			q->koniec = 0;
			
			
			rsSndByte(q->buffer_pointer[q->koniec]);		// Odczytujemy wartoæ z bufora
 50a:	e8 81       	ld	r30, Y
 50c:	f9 81       	ldd	r31, Y+1	; 0x01
 50e:	e8 0f       	add	r30, r24
 510:	f1 1d       	adc	r31, r1
 512:	80 81       	ld	r24, Z
 514:	0e 94 01 02 	call	0x402	; 0x402 <rsSndByte>
			return 0; //bufor nie zosta³ jescze oprozniony
	}
	
void UART_TX_bufor_wyslij(bufor_cykliczny *q)
	{
		while(q->poczatek != q->koniec)
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	9a 81       	ldd	r25, Y+2	; 0x02
 51c:	98 13       	cpse	r25, r24
 51e:	f3 cf       	rjmp	.-26     	; 0x506 <UART_TX_bufor_wyslij+0xe>
			
			
			rsSndByte(q->buffer_pointer[q->koniec]);		// Odczytujemy wartoæ z bufora
		}	
		
			}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <UART_TX_bufor_dopisz>:
				 return flstr;
 }

	
int UART_TX_bufor_dopisz(bufor_cykliczny  *q, char data)
{
 526:	fc 01       	movw	r30, r24
	uint8_t head_temp = q->poczatek + 1;	// Przypisujemy do zmiennej nastêpny indeks
 528:	92 81       	ldd	r25, Z+2	; 0x02
 52a:	9f 5f       	subi	r25, 0xFF	; 255
	
	// Sprawdzamy czy jest miejsce w buforze.
	// Jeli bufor jest pe³ny to wysy³amy
	if ( head_temp == q->koniec )
 52c:	83 81       	ldd	r24, Z+3	; 0x03
 52e:	98 13       	cpse	r25, r24
 530:	06 c0       	rjmp	.+12     	; 0x53e <UART_TX_bufor_dopisz+0x18>
 532:	cf 01       	movw	r24, r30
	{
		//_delay_ms(500); //dodatkowe opznienie
			UART_TX_bufor_wyslij(q);
 534:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <UART_TX_bufor_wyslij>
			return 1; //wys³ano zaw bufora
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	08 95       	ret

			if ( head_temp == ROZMIAR )
			head_temp = 0;	
			
			//jest miejsce w buf
			q->buffer_pointer[head_temp] = data;	// Wpisujemy wartoæ do bufora
 53e:	a0 81       	ld	r26, Z
 540:	b1 81       	ldd	r27, Z+1	; 0x01
 542:	a9 0f       	add	r26, r25
 544:	b1 1d       	adc	r27, r1
 546:	6c 93       	st	X, r22
			q->poczatek = head_temp;			// Zapisujemy nowy indeks head o 1 wiekszy
 548:	92 83       	std	Z+2, r25	; 0x02
			
			
			return 0; //bufor nie zosta³ jescze oprozniony
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
	}
 54e:	08 95       	ret

00000550 <Print_to_buf>:
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
}


void Print_to_buf(bufor_cykliczny* q, char text[])
{
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	eb 01       	movw	r28, r22
	unsigned int i;
	i = 0;
	while ( text[i] != 0 )
 55a:	68 81       	ld	r22, Y
 55c:	66 23       	and	r22, r22
 55e:	41 f0       	breq	.+16     	; 0x570 <Print_to_buf+0x20>
 560:	8c 01       	movw	r16, r24
 562:	21 96       	adiw	r28, 0x01	; 1
	{
	UART_TX_bufor_dopisz(q, text[i]);
 564:	c8 01       	movw	r24, r16
 566:	0e 94 93 02 	call	0x526	; 0x526 <UART_TX_bufor_dopisz>

void Print_to_buf(bufor_cykliczny* q, char text[])
{
	unsigned int i;
	i = 0;
	while ( text[i] != 0 )
 56a:	69 91       	ld	r22, Y+
 56c:	61 11       	cpse	r22, r1
 56e:	fa cf       	rjmp	.-12     	; 0x564 <Print_to_buf+0x14>
	UART_TX_bufor_dopisz(q, text[i]);
		i++;
	}


}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <__subsf3>:
 57a:	50 58       	subi	r21, 0x80	; 128

0000057c <__addsf3>:
 57c:	bb 27       	eor	r27, r27
 57e:	aa 27       	eor	r26, r26
 580:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__addsf3x>
 584:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>
 588:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 58c:	38 f0       	brcs	.+14     	; 0x59c <__addsf3+0x20>
 58e:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 592:	20 f0       	brcs	.+8      	; 0x59c <__addsf3+0x20>
 594:	39 f4       	brne	.+14     	; 0x5a4 <__addsf3+0x28>
 596:	9f 3f       	cpi	r25, 0xFF	; 255
 598:	19 f4       	brne	.+6      	; 0x5a0 <__addsf3+0x24>
 59a:	26 f4       	brtc	.+8      	; 0x5a4 <__addsf3+0x28>
 59c:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>
 5a0:	0e f4       	brtc	.+2      	; 0x5a4 <__addsf3+0x28>
 5a2:	e0 95       	com	r30
 5a4:	e7 fb       	bst	r30, 7
 5a6:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>

000005aa <__addsf3x>:
 5aa:	e9 2f       	mov	r30, r25
 5ac:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 5b0:	58 f3       	brcs	.-42     	; 0x588 <__addsf3+0xc>
 5b2:	ba 17       	cp	r27, r26
 5b4:	62 07       	cpc	r22, r18
 5b6:	73 07       	cpc	r23, r19
 5b8:	84 07       	cpc	r24, r20
 5ba:	95 07       	cpc	r25, r21
 5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__addsf3x+0x1c>
 5be:	79 f4       	brne	.+30     	; 0x5de <__addsf3x+0x34>
 5c0:	a6 f5       	brtc	.+104    	; 0x62a <__addsf3x+0x80>
 5c2:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_zero>
 5c6:	0e f4       	brtc	.+2      	; 0x5ca <__addsf3x+0x20>
 5c8:	e0 95       	com	r30
 5ca:	0b 2e       	mov	r0, r27
 5cc:	ba 2f       	mov	r27, r26
 5ce:	a0 2d       	mov	r26, r0
 5d0:	0b 01       	movw	r0, r22
 5d2:	b9 01       	movw	r22, r18
 5d4:	90 01       	movw	r18, r0
 5d6:	0c 01       	movw	r0, r24
 5d8:	ca 01       	movw	r24, r20
 5da:	a0 01       	movw	r20, r0
 5dc:	11 24       	eor	r1, r1
 5de:	ff 27       	eor	r31, r31
 5e0:	59 1b       	sub	r21, r25
 5e2:	99 f0       	breq	.+38     	; 0x60a <__addsf3x+0x60>
 5e4:	59 3f       	cpi	r21, 0xF9	; 249
 5e6:	50 f4       	brcc	.+20     	; 0x5fc <__addsf3x+0x52>
 5e8:	50 3e       	cpi	r21, 0xE0	; 224
 5ea:	68 f1       	brcs	.+90     	; 0x646 <__addsf3x+0x9c>
 5ec:	1a 16       	cp	r1, r26
 5ee:	f0 40       	sbci	r31, 0x00	; 0
 5f0:	a2 2f       	mov	r26, r18
 5f2:	23 2f       	mov	r18, r19
 5f4:	34 2f       	mov	r19, r20
 5f6:	44 27       	eor	r20, r20
 5f8:	58 5f       	subi	r21, 0xF8	; 248
 5fa:	f3 cf       	rjmp	.-26     	; 0x5e2 <__addsf3x+0x38>
 5fc:	46 95       	lsr	r20
 5fe:	37 95       	ror	r19
 600:	27 95       	ror	r18
 602:	a7 95       	ror	r26
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	53 95       	inc	r21
 608:	c9 f7       	brne	.-14     	; 0x5fc <__addsf3x+0x52>
 60a:	7e f4       	brtc	.+30     	; 0x62a <__addsf3x+0x80>
 60c:	1f 16       	cp	r1, r31
 60e:	ba 0b       	sbc	r27, r26
 610:	62 0b       	sbc	r22, r18
 612:	73 0b       	sbc	r23, r19
 614:	84 0b       	sbc	r24, r20
 616:	ba f0       	brmi	.+46     	; 0x646 <__addsf3x+0x9c>
 618:	91 50       	subi	r25, 0x01	; 1
 61a:	a1 f0       	breq	.+40     	; 0x644 <__addsf3x+0x9a>
 61c:	ff 0f       	add	r31, r31
 61e:	bb 1f       	adc	r27, r27
 620:	66 1f       	adc	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	88 1f       	adc	r24, r24
 626:	c2 f7       	brpl	.-16     	; 0x618 <__addsf3x+0x6e>
 628:	0e c0       	rjmp	.+28     	; 0x646 <__addsf3x+0x9c>
 62a:	ba 0f       	add	r27, r26
 62c:	62 1f       	adc	r22, r18
 62e:	73 1f       	adc	r23, r19
 630:	84 1f       	adc	r24, r20
 632:	48 f4       	brcc	.+18     	; 0x646 <__addsf3x+0x9c>
 634:	87 95       	ror	r24
 636:	77 95       	ror	r23
 638:	67 95       	ror	r22
 63a:	b7 95       	ror	r27
 63c:	f7 95       	ror	r31
 63e:	9e 3f       	cpi	r25, 0xFE	; 254
 640:	08 f0       	brcs	.+2      	; 0x644 <__addsf3x+0x9a>
 642:	b0 cf       	rjmp	.-160    	; 0x5a4 <__addsf3+0x28>
 644:	93 95       	inc	r25
 646:	88 0f       	add	r24, r24
 648:	08 f0       	brcs	.+2      	; 0x64c <__addsf3x+0xa2>
 64a:	99 27       	eor	r25, r25
 64c:	ee 0f       	add	r30, r30
 64e:	97 95       	ror	r25
 650:	87 95       	ror	r24
 652:	08 95       	ret

00000654 <__divsf3>:
 654:	0e 94 3e 03 	call	0x67c	; 0x67c <__divsf3x>
 658:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>
 65c:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 660:	58 f0       	brcs	.+22     	; 0x678 <__divsf3+0x24>
 662:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 666:	40 f0       	brcs	.+16     	; 0x678 <__divsf3+0x24>
 668:	29 f4       	brne	.+10     	; 0x674 <__divsf3+0x20>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	29 f0       	breq	.+10     	; 0x678 <__divsf3+0x24>
 66e:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 672:	51 11       	cpse	r21, r1
 674:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 678:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>

0000067c <__divsf3x>:
 67c:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 680:	68 f3       	brcs	.-38     	; 0x65c <__divsf3+0x8>

00000682 <__divsf3_pse>:
 682:	99 23       	and	r25, r25
 684:	b1 f3       	breq	.-20     	; 0x672 <__divsf3+0x1e>
 686:	55 23       	and	r21, r21
 688:	91 f3       	breq	.-28     	; 0x66e <__divsf3+0x1a>
 68a:	95 1b       	sub	r25, r21
 68c:	55 0b       	sbc	r21, r21
 68e:	bb 27       	eor	r27, r27
 690:	aa 27       	eor	r26, r26
 692:	62 17       	cp	r22, r18
 694:	73 07       	cpc	r23, r19
 696:	84 07       	cpc	r24, r20
 698:	38 f0       	brcs	.+14     	; 0x6a8 <__divsf3_pse+0x26>
 69a:	9f 5f       	subi	r25, 0xFF	; 255
 69c:	5f 4f       	sbci	r21, 0xFF	; 255
 69e:	22 0f       	add	r18, r18
 6a0:	33 1f       	adc	r19, r19
 6a2:	44 1f       	adc	r20, r20
 6a4:	aa 1f       	adc	r26, r26
 6a6:	a9 f3       	breq	.-22     	; 0x692 <__divsf3_pse+0x10>
 6a8:	35 d0       	rcall	.+106    	; 0x714 <__divsf3_pse+0x92>
 6aa:	0e 2e       	mov	r0, r30
 6ac:	3a f0       	brmi	.+14     	; 0x6bc <__divsf3_pse+0x3a>
 6ae:	e0 e8       	ldi	r30, 0x80	; 128
 6b0:	32 d0       	rcall	.+100    	; 0x716 <__divsf3_pse+0x94>
 6b2:	91 50       	subi	r25, 0x01	; 1
 6b4:	50 40       	sbci	r21, 0x00	; 0
 6b6:	e6 95       	lsr	r30
 6b8:	00 1c       	adc	r0, r0
 6ba:	ca f7       	brpl	.-14     	; 0x6ae <__divsf3_pse+0x2c>
 6bc:	2b d0       	rcall	.+86     	; 0x714 <__divsf3_pse+0x92>
 6be:	fe 2f       	mov	r31, r30
 6c0:	29 d0       	rcall	.+82     	; 0x714 <__divsf3_pse+0x92>
 6c2:	66 0f       	add	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	bb 1f       	adc	r27, r27
 6ca:	26 17       	cp	r18, r22
 6cc:	37 07       	cpc	r19, r23
 6ce:	48 07       	cpc	r20, r24
 6d0:	ab 07       	cpc	r26, r27
 6d2:	b0 e8       	ldi	r27, 0x80	; 128
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <__divsf3_pse+0x56>
 6d6:	bb 0b       	sbc	r27, r27
 6d8:	80 2d       	mov	r24, r0
 6da:	bf 01       	movw	r22, r30
 6dc:	ff 27       	eor	r31, r31
 6de:	93 58       	subi	r25, 0x83	; 131
 6e0:	5f 4f       	sbci	r21, 0xFF	; 255
 6e2:	3a f0       	brmi	.+14     	; 0x6f2 <__divsf3_pse+0x70>
 6e4:	9e 3f       	cpi	r25, 0xFE	; 254
 6e6:	51 05       	cpc	r21, r1
 6e8:	78 f0       	brcs	.+30     	; 0x708 <__divsf3_pse+0x86>
 6ea:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 6ee:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 6f2:	5f 3f       	cpi	r21, 0xFF	; 255
 6f4:	e4 f3       	brlt	.-8      	; 0x6ee <__divsf3_pse+0x6c>
 6f6:	98 3e       	cpi	r25, 0xE8	; 232
 6f8:	d4 f3       	brlt	.-12     	; 0x6ee <__divsf3_pse+0x6c>
 6fa:	86 95       	lsr	r24
 6fc:	77 95       	ror	r23
 6fe:	67 95       	ror	r22
 700:	b7 95       	ror	r27
 702:	f7 95       	ror	r31
 704:	9f 5f       	subi	r25, 0xFF	; 255
 706:	c9 f7       	brne	.-14     	; 0x6fa <__divsf3_pse+0x78>
 708:	88 0f       	add	r24, r24
 70a:	91 1d       	adc	r25, r1
 70c:	96 95       	lsr	r25
 70e:	87 95       	ror	r24
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret
 714:	e1 e0       	ldi	r30, 0x01	; 1
 716:	66 0f       	add	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	bb 1f       	adc	r27, r27
 71e:	62 17       	cp	r22, r18
 720:	73 07       	cpc	r23, r19
 722:	84 07       	cpc	r24, r20
 724:	ba 07       	cpc	r27, r26
 726:	20 f0       	brcs	.+8      	; 0x730 <__divsf3_pse+0xae>
 728:	62 1b       	sub	r22, r18
 72a:	73 0b       	sbc	r23, r19
 72c:	84 0b       	sbc	r24, r20
 72e:	ba 0b       	sbc	r27, r26
 730:	ee 1f       	adc	r30, r30
 732:	88 f7       	brcc	.-30     	; 0x716 <__divsf3_pse+0x94>
 734:	e0 95       	com	r30
 736:	08 95       	ret

00000738 <__fixsfsi>:
 738:	0e 94 a3 03 	call	0x746	; 0x746 <__fixunssfsi>
 73c:	68 94       	set
 73e:	b1 11       	cpse	r27, r1
 740:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 744:	08 95       	ret

00000746 <__fixunssfsi>:
 746:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_splitA>
 74a:	88 f0       	brcs	.+34     	; 0x76e <__fixunssfsi+0x28>
 74c:	9f 57       	subi	r25, 0x7F	; 127
 74e:	98 f0       	brcs	.+38     	; 0x776 <__fixunssfsi+0x30>
 750:	b9 2f       	mov	r27, r25
 752:	99 27       	eor	r25, r25
 754:	b7 51       	subi	r27, 0x17	; 23
 756:	b0 f0       	brcs	.+44     	; 0x784 <__fixunssfsi+0x3e>
 758:	e1 f0       	breq	.+56     	; 0x792 <__fixunssfsi+0x4c>
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	1a f0       	brmi	.+6      	; 0x76a <__fixunssfsi+0x24>
 764:	ba 95       	dec	r27
 766:	c9 f7       	brne	.-14     	; 0x75a <__fixunssfsi+0x14>
 768:	14 c0       	rjmp	.+40     	; 0x792 <__fixunssfsi+0x4c>
 76a:	b1 30       	cpi	r27, 0x01	; 1
 76c:	91 f0       	breq	.+36     	; 0x792 <__fixunssfsi+0x4c>
 76e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_zero>
 772:	b1 e0       	ldi	r27, 0x01	; 1
 774:	08 95       	ret
 776:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_zero>
 77a:	67 2f       	mov	r22, r23
 77c:	78 2f       	mov	r23, r24
 77e:	88 27       	eor	r24, r24
 780:	b8 5f       	subi	r27, 0xF8	; 248
 782:	39 f0       	breq	.+14     	; 0x792 <__fixunssfsi+0x4c>
 784:	b9 3f       	cpi	r27, 0xF9	; 249
 786:	cc f3       	brlt	.-14     	; 0x77a <__fixunssfsi+0x34>
 788:	86 95       	lsr	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b3 95       	inc	r27
 790:	d9 f7       	brne	.-10     	; 0x788 <__fixunssfsi+0x42>
 792:	3e f4       	brtc	.+14     	; 0x7a2 <__fixunssfsi+0x5c>
 794:	90 95       	com	r25
 796:	80 95       	com	r24
 798:	70 95       	com	r23
 79a:	61 95       	neg	r22
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__floatunsisf>:
 7a4:	e8 94       	clt
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <__floatsisf+0x12>

000007a8 <__floatsisf>:
 7a8:	97 fb       	bst	r25, 7
 7aa:	3e f4       	brtc	.+14     	; 0x7ba <__floatsisf+0x12>
 7ac:	90 95       	com	r25
 7ae:	80 95       	com	r24
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	99 23       	and	r25, r25
 7bc:	a9 f0       	breq	.+42     	; 0x7e8 <__floatsisf+0x40>
 7be:	f9 2f       	mov	r31, r25
 7c0:	96 e9       	ldi	r25, 0x96	; 150
 7c2:	bb 27       	eor	r27, r27
 7c4:	93 95       	inc	r25
 7c6:	f6 95       	lsr	r31
 7c8:	87 95       	ror	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	b7 95       	ror	r27
 7d0:	f1 11       	cpse	r31, r1
 7d2:	f8 cf       	rjmp	.-16     	; 0x7c4 <__floatsisf+0x1c>
 7d4:	fa f4       	brpl	.+62     	; 0x814 <__floatsisf+0x6c>
 7d6:	bb 0f       	add	r27, r27
 7d8:	11 f4       	brne	.+4      	; 0x7de <__floatsisf+0x36>
 7da:	60 ff       	sbrs	r22, 0
 7dc:	1b c0       	rjmp	.+54     	; 0x814 <__floatsisf+0x6c>
 7de:	6f 5f       	subi	r22, 0xFF	; 255
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	16 c0       	rjmp	.+44     	; 0x814 <__floatsisf+0x6c>
 7e8:	88 23       	and	r24, r24
 7ea:	11 f0       	breq	.+4      	; 0x7f0 <__floatsisf+0x48>
 7ec:	96 e9       	ldi	r25, 0x96	; 150
 7ee:	11 c0       	rjmp	.+34     	; 0x812 <__floatsisf+0x6a>
 7f0:	77 23       	and	r23, r23
 7f2:	21 f0       	breq	.+8      	; 0x7fc <__floatsisf+0x54>
 7f4:	9e e8       	ldi	r25, 0x8E	; 142
 7f6:	87 2f       	mov	r24, r23
 7f8:	76 2f       	mov	r23, r22
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <__floatsisf+0x5e>
 7fc:	66 23       	and	r22, r22
 7fe:	71 f0       	breq	.+28     	; 0x81c <__floatsisf+0x74>
 800:	96 e8       	ldi	r25, 0x86	; 134
 802:	86 2f       	mov	r24, r22
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	2a f0       	brmi	.+10     	; 0x814 <__floatsisf+0x6c>
 80a:	9a 95       	dec	r25
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	da f7       	brpl	.-10     	; 0x80a <__floatsisf+0x62>
 814:	88 0f       	add	r24, r24
 816:	96 95       	lsr	r25
 818:	87 95       	ror	r24
 81a:	97 f9       	bld	r25, 7
 81c:	08 95       	ret

0000081e <__fp_inf>:
 81e:	97 f9       	bld	r25, 7
 820:	9f 67       	ori	r25, 0x7F	; 127
 822:	80 e8       	ldi	r24, 0x80	; 128
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	08 95       	ret

0000082a <__fp_nan>:
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	80 ec       	ldi	r24, 0xC0	; 192
 82e:	08 95       	ret

00000830 <__fp_pscA>:
 830:	00 24       	eor	r0, r0
 832:	0a 94       	dec	r0
 834:	16 16       	cp	r1, r22
 836:	17 06       	cpc	r1, r23
 838:	18 06       	cpc	r1, r24
 83a:	09 06       	cpc	r0, r25
 83c:	08 95       	ret

0000083e <__fp_pscB>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	05 06       	cpc	r0, r21
 84a:	08 95       	ret

0000084c <__fp_round>:
 84c:	09 2e       	mov	r0, r25
 84e:	03 94       	inc	r0
 850:	00 0c       	add	r0, r0
 852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0xc>
 854:	88 23       	and	r24, r24
 856:	52 f0       	brmi	.+20     	; 0x86c <__fp_round+0x20>
 858:	bb 0f       	add	r27, r27
 85a:	40 f4       	brcc	.+16     	; 0x86c <__fp_round+0x20>
 85c:	bf 2b       	or	r27, r31
 85e:	11 f4       	brne	.+4      	; 0x864 <__fp_round+0x18>
 860:	60 ff       	sbrs	r22, 0
 862:	04 c0       	rjmp	.+8      	; 0x86c <__fp_round+0x20>
 864:	6f 5f       	subi	r22, 0xFF	; 255
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	08 95       	ret

0000086e <__fp_split3>:
 86e:	57 fd       	sbrc	r21, 7
 870:	90 58       	subi	r25, 0x80	; 128
 872:	44 0f       	add	r20, r20
 874:	55 1f       	adc	r21, r21
 876:	59 f0       	breq	.+22     	; 0x88e <__fp_splitA+0x10>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	71 f0       	breq	.+28     	; 0x898 <__fp_splitA+0x1a>
 87c:	47 95       	ror	r20

0000087e <__fp_splitA>:
 87e:	88 0f       	add	r24, r24
 880:	97 fb       	bst	r25, 7
 882:	99 1f       	adc	r25, r25
 884:	61 f0       	breq	.+24     	; 0x89e <__fp_splitA+0x20>
 886:	9f 3f       	cpi	r25, 0xFF	; 255
 888:	79 f0       	breq	.+30     	; 0x8a8 <__fp_splitA+0x2a>
 88a:	87 95       	ror	r24
 88c:	08 95       	ret
 88e:	12 16       	cp	r1, r18
 890:	13 06       	cpc	r1, r19
 892:	14 06       	cpc	r1, r20
 894:	55 1f       	adc	r21, r21
 896:	f2 cf       	rjmp	.-28     	; 0x87c <__fp_split3+0xe>
 898:	46 95       	lsr	r20
 89a:	f1 df       	rcall	.-30     	; 0x87e <__fp_splitA>
 89c:	08 c0       	rjmp	.+16     	; 0x8ae <__fp_splitA+0x30>
 89e:	16 16       	cp	r1, r22
 8a0:	17 06       	cpc	r1, r23
 8a2:	18 06       	cpc	r1, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	f1 cf       	rjmp	.-30     	; 0x88a <__fp_splitA+0xc>
 8a8:	86 95       	lsr	r24
 8aa:	71 05       	cpc	r23, r1
 8ac:	61 05       	cpc	r22, r1
 8ae:	08 94       	sec
 8b0:	08 95       	ret

000008b2 <__fp_zero>:
 8b2:	e8 94       	clt

000008b4 <__fp_szero>:
 8b4:	bb 27       	eor	r27, r27
 8b6:	66 27       	eor	r22, r22
 8b8:	77 27       	eor	r23, r23
 8ba:	cb 01       	movw	r24, r22
 8bc:	97 f9       	bld	r25, 7
 8be:	08 95       	ret

000008c0 <__mulsf3>:
 8c0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3x>
 8c4:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>
 8c8:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 8cc:	38 f0       	brcs	.+14     	; 0x8dc <__mulsf3+0x1c>
 8ce:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <__mulsf3+0x1c>
 8d4:	95 23       	and	r25, r21
 8d6:	11 f0       	breq	.+4      	; 0x8dc <__mulsf3+0x1c>
 8d8:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 8dc:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>
 8e0:	11 24       	eor	r1, r1
 8e2:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>

000008e6 <__mulsf3x>:
 8e6:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 8ea:	70 f3       	brcs	.-36     	; 0x8c8 <__mulsf3+0x8>

000008ec <__mulsf3_pse>:
 8ec:	95 9f       	mul	r25, r21
 8ee:	c1 f3       	breq	.-16     	; 0x8e0 <__mulsf3+0x20>
 8f0:	95 0f       	add	r25, r21
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	55 1f       	adc	r21, r21
 8f6:	62 9f       	mul	r22, r18
 8f8:	f0 01       	movw	r30, r0
 8fa:	72 9f       	mul	r23, r18
 8fc:	bb 27       	eor	r27, r27
 8fe:	f0 0d       	add	r31, r0
 900:	b1 1d       	adc	r27, r1
 902:	63 9f       	mul	r22, r19
 904:	aa 27       	eor	r26, r26
 906:	f0 0d       	add	r31, r0
 908:	b1 1d       	adc	r27, r1
 90a:	aa 1f       	adc	r26, r26
 90c:	64 9f       	mul	r22, r20
 90e:	66 27       	eor	r22, r22
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	66 1f       	adc	r22, r22
 916:	82 9f       	mul	r24, r18
 918:	22 27       	eor	r18, r18
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	62 1f       	adc	r22, r18
 920:	73 9f       	mul	r23, r19
 922:	b0 0d       	add	r27, r0
 924:	a1 1d       	adc	r26, r1
 926:	62 1f       	adc	r22, r18
 928:	83 9f       	mul	r24, r19
 92a:	a0 0d       	add	r26, r0
 92c:	61 1d       	adc	r22, r1
 92e:	22 1f       	adc	r18, r18
 930:	74 9f       	mul	r23, r20
 932:	33 27       	eor	r19, r19
 934:	a0 0d       	add	r26, r0
 936:	61 1d       	adc	r22, r1
 938:	23 1f       	adc	r18, r19
 93a:	84 9f       	mul	r24, r20
 93c:	60 0d       	add	r22, r0
 93e:	21 1d       	adc	r18, r1
 940:	82 2f       	mov	r24, r18
 942:	76 2f       	mov	r23, r22
 944:	6a 2f       	mov	r22, r26
 946:	11 24       	eor	r1, r1
 948:	9f 57       	subi	r25, 0x7F	; 127
 94a:	50 40       	sbci	r21, 0x00	; 0
 94c:	9a f0       	brmi	.+38     	; 0x974 <__mulsf3_pse+0x88>
 94e:	f1 f0       	breq	.+60     	; 0x98c <__mulsf3_pse+0xa0>
 950:	88 23       	and	r24, r24
 952:	4a f0       	brmi	.+18     	; 0x966 <__mulsf3_pse+0x7a>
 954:	ee 0f       	add	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	bb 1f       	adc	r27, r27
 95a:	66 1f       	adc	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	91 50       	subi	r25, 0x01	; 1
 962:	50 40       	sbci	r21, 0x00	; 0
 964:	a9 f7       	brne	.-22     	; 0x950 <__mulsf3_pse+0x64>
 966:	9e 3f       	cpi	r25, 0xFE	; 254
 968:	51 05       	cpc	r21, r1
 96a:	80 f0       	brcs	.+32     	; 0x98c <__mulsf3_pse+0xa0>
 96c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 970:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	e4 f3       	brlt	.-8      	; 0x970 <__mulsf3_pse+0x84>
 978:	98 3e       	cpi	r25, 0xE8	; 232
 97a:	d4 f3       	brlt	.-12     	; 0x970 <__mulsf3_pse+0x84>
 97c:	86 95       	lsr	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f7 95       	ror	r31
 986:	e7 95       	ror	r30
 988:	9f 5f       	subi	r25, 0xFF	; 255
 98a:	c1 f7       	brne	.-16     	; 0x97c <__mulsf3_pse+0x90>
 98c:	fe 2b       	or	r31, r30
 98e:	88 0f       	add	r24, r24
 990:	91 1d       	adc	r25, r1
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <pow>:
 99a:	fa 01       	movw	r30, r20
 99c:	ee 0f       	add	r30, r30
 99e:	ff 1f       	adc	r31, r31
 9a0:	30 96       	adiw	r30, 0x00	; 0
 9a2:	21 05       	cpc	r18, r1
 9a4:	31 05       	cpc	r19, r1
 9a6:	a1 f1       	breq	.+104    	; 0xa10 <pow+0x76>
 9a8:	61 15       	cp	r22, r1
 9aa:	71 05       	cpc	r23, r1
 9ac:	61 f4       	brne	.+24     	; 0x9c6 <pow+0x2c>
 9ae:	80 38       	cpi	r24, 0x80	; 128
 9b0:	bf e3       	ldi	r27, 0x3F	; 63
 9b2:	9b 07       	cpc	r25, r27
 9b4:	49 f1       	breq	.+82     	; 0xa08 <pow+0x6e>
 9b6:	68 94       	set
 9b8:	90 38       	cpi	r25, 0x80	; 128
 9ba:	81 05       	cpc	r24, r1
 9bc:	61 f0       	breq	.+24     	; 0x9d6 <pow+0x3c>
 9be:	80 38       	cpi	r24, 0x80	; 128
 9c0:	bf ef       	ldi	r27, 0xFF	; 255
 9c2:	9b 07       	cpc	r25, r27
 9c4:	41 f0       	breq	.+16     	; 0x9d6 <pow+0x3c>
 9c6:	99 23       	and	r25, r25
 9c8:	4a f5       	brpl	.+82     	; 0xa1c <pow+0x82>
 9ca:	ff 3f       	cpi	r31, 0xFF	; 255
 9cc:	e1 05       	cpc	r30, r1
 9ce:	31 05       	cpc	r19, r1
 9d0:	21 05       	cpc	r18, r1
 9d2:	19 f1       	breq	.+70     	; 0xa1a <pow+0x80>
 9d4:	e8 94       	clt
 9d6:	08 94       	sec
 9d8:	e7 95       	ror	r30
 9da:	d9 01       	movw	r26, r18
 9dc:	aa 23       	and	r26, r26
 9de:	29 f4       	brne	.+10     	; 0x9ea <pow+0x50>
 9e0:	ab 2f       	mov	r26, r27
 9e2:	be 2f       	mov	r27, r30
 9e4:	f8 5f       	subi	r31, 0xF8	; 248
 9e6:	d0 f3       	brcs	.-12     	; 0x9dc <pow+0x42>
 9e8:	10 c0       	rjmp	.+32     	; 0xa0a <pow+0x70>
 9ea:	ff 5f       	subi	r31, 0xFF	; 255
 9ec:	70 f4       	brcc	.+28     	; 0xa0a <pow+0x70>
 9ee:	a6 95       	lsr	r26
 9f0:	e0 f7       	brcc	.-8      	; 0x9ea <pow+0x50>
 9f2:	f7 39       	cpi	r31, 0x97	; 151
 9f4:	50 f0       	brcs	.+20     	; 0xa0a <pow+0x70>
 9f6:	19 f0       	breq	.+6      	; 0x9fe <pow+0x64>
 9f8:	ff 3a       	cpi	r31, 0xAF	; 175
 9fa:	38 f4       	brcc	.+14     	; 0xa0a <pow+0x70>
 9fc:	9f 77       	andi	r25, 0x7F	; 127
 9fe:	9f 93       	push	r25
 a00:	0d d0       	rcall	.+26     	; 0xa1c <pow+0x82>
 a02:	0f 90       	pop	r0
 a04:	07 fc       	sbrc	r0, 7
 a06:	90 58       	subi	r25, 0x80	; 128
 a08:	08 95       	ret
 a0a:	46 f0       	brts	.+16     	; 0xa1c <pow+0x82>
 a0c:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	70 e0       	ldi	r23, 0x00	; 0
 a14:	80 e8       	ldi	r24, 0x80	; 128
 a16:	9f e3       	ldi	r25, 0x3F	; 63
 a18:	08 95       	ret
 a1a:	4f e7       	ldi	r20, 0x7F	; 127
 a1c:	9f 77       	andi	r25, 0x7F	; 127
 a1e:	5f 93       	push	r21
 a20:	4f 93       	push	r20
 a22:	3f 93       	push	r19
 a24:	2f 93       	push	r18
 a26:	0e 94 c8 05 	call	0xb90	; 0xb90 <log>
 a2a:	2f 91       	pop	r18
 a2c:	3f 91       	pop	r19
 a2e:	4f 91       	pop	r20
 a30:	5f 91       	pop	r21
 a32:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>
 a36:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <exp>
 a3a:	29 f4       	brne	.+10     	; 0xa46 <pow+0xac>
 a3c:	16 f0       	brts	.+4      	; 0xa42 <pow+0xa8>
 a3e:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 a42:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_zero>
 a46:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>

00000a4a <exp>:
 a4a:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_splitA>
 a4e:	a8 f3       	brcs	.-22     	; 0xa3a <pow+0xa0>
 a50:	96 38       	cpi	r25, 0x86	; 134
 a52:	a0 f7       	brcc	.-24     	; 0xa3c <pow+0xa2>
 a54:	07 f8       	bld	r0, 7
 a56:	0f 92       	push	r0
 a58:	e8 94       	clt
 a5a:	2b e3       	ldi	r18, 0x3B	; 59
 a5c:	3a ea       	ldi	r19, 0xAA	; 170
 a5e:	48 eb       	ldi	r20, 0xB8	; 184
 a60:	5f e7       	ldi	r21, 0x7F	; 127
 a62:	0e 94 76 04 	call	0x8ec	; 0x8ec <__mulsf3_pse>
 a66:	0f 92       	push	r0
 a68:	0f 92       	push	r0
 a6a:	0f 92       	push	r0
 a6c:	4d b7       	in	r20, 0x3d	; 61
 a6e:	5e b7       	in	r21, 0x3e	; 62
 a70:	0f 92       	push	r0
 a72:	0e 94 10 06 	call	0xc20	; 0xc20 <modf>
 a76:	ec ea       	ldi	r30, 0xAC	; 172
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_powser>
 a7e:	4f 91       	pop	r20
 a80:	5f 91       	pop	r21
 a82:	ef 91       	pop	r30
 a84:	ff 91       	pop	r31
 a86:	e5 95       	asr	r30
 a88:	ee 1f       	adc	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	49 f0       	breq	.+18     	; 0xaa0 <exp+0x56>
 a8e:	fe 57       	subi	r31, 0x7E	; 126
 a90:	e0 68       	ori	r30, 0x80	; 128
 a92:	44 27       	eor	r20, r20
 a94:	ee 0f       	add	r30, r30
 a96:	44 1f       	adc	r20, r20
 a98:	fa 95       	dec	r31
 a9a:	e1 f7       	brne	.-8      	; 0xa94 <exp+0x4a>
 a9c:	41 95       	neg	r20
 a9e:	55 0b       	sbc	r21, r21
 aa0:	0e 94 8a 05 	call	0xb14	; 0xb14 <ldexp>
 aa4:	0f 90       	pop	r0
 aa6:	07 fe       	sbrs	r0, 7
 aa8:	0c 94 7e 05 	jmp	0xafc	; 0xafc <inverse>
 aac:	08 95       	ret

00000aae <__fp_powser>:
 aae:	df 93       	push	r29
 ab0:	cf 93       	push	r28
 ab2:	1f 93       	push	r17
 ab4:	0f 93       	push	r16
 ab6:	ff 92       	push	r15
 ab8:	ef 92       	push	r14
 aba:	df 92       	push	r13
 abc:	7b 01       	movw	r14, r22
 abe:	8c 01       	movw	r16, r24
 ac0:	68 94       	set
 ac2:	06 c0       	rjmp	.+12     	; 0xad0 <__fp_powser+0x22>
 ac4:	da 2e       	mov	r13, r26
 ac6:	ef 01       	movw	r28, r30
 ac8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3x>
 acc:	fe 01       	movw	r30, r28
 ace:	e8 94       	clt
 ad0:	a5 91       	lpm	r26, Z+
 ad2:	25 91       	lpm	r18, Z+
 ad4:	35 91       	lpm	r19, Z+
 ad6:	45 91       	lpm	r20, Z+
 ad8:	55 91       	lpm	r21, Z+
 ada:	a6 f3       	brts	.-24     	; 0xac4 <__fp_powser+0x16>
 adc:	ef 01       	movw	r28, r30
 ade:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__addsf3x>
 ae2:	fe 01       	movw	r30, r28
 ae4:	97 01       	movw	r18, r14
 ae6:	a8 01       	movw	r20, r16
 ae8:	da 94       	dec	r13
 aea:	69 f7       	brne	.-38     	; 0xac6 <__fp_powser+0x18>
 aec:	df 90       	pop	r13
 aee:	ef 90       	pop	r14
 af0:	ff 90       	pop	r15
 af2:	0f 91       	pop	r16
 af4:	1f 91       	pop	r17
 af6:	cf 91       	pop	r28
 af8:	df 91       	pop	r29
 afa:	08 95       	ret

00000afc <inverse>:
 afc:	9b 01       	movw	r18, r22
 afe:	ac 01       	movw	r20, r24
 b00:	60 e0       	ldi	r22, 0x00	; 0
 b02:	70 e0       	ldi	r23, 0x00	; 0
 b04:	80 e8       	ldi	r24, 0x80	; 128
 b06:	9f e3       	ldi	r25, 0x3F	; 63
 b08:	0c 94 2a 03 	jmp	0x654	; 0x654 <__divsf3>
 b0c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 b10:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_mpack>

00000b14 <ldexp>:
 b14:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_splitA>
 b18:	d8 f3       	brcs	.-10     	; 0xb10 <__stack+0x11>
 b1a:	99 23       	and	r25, r25
 b1c:	c9 f3       	breq	.-14     	; 0xb10 <__stack+0x11>
 b1e:	94 0f       	add	r25, r20
 b20:	51 1d       	adc	r21, r1
 b22:	a3 f3       	brvs	.-24     	; 0xb0c <__stack+0xd>
 b24:	91 50       	subi	r25, 0x01	; 1
 b26:	50 40       	sbci	r21, 0x00	; 0
 b28:	94 f0       	brlt	.+36     	; 0xb4e <ldexp+0x3a>
 b2a:	59 f0       	breq	.+22     	; 0xb42 <ldexp+0x2e>
 b2c:	88 23       	and	r24, r24
 b2e:	32 f0       	brmi	.+12     	; 0xb3c <ldexp+0x28>
 b30:	66 0f       	add	r22, r22
 b32:	77 1f       	adc	r23, r23
 b34:	88 1f       	adc	r24, r24
 b36:	91 50       	subi	r25, 0x01	; 1
 b38:	50 40       	sbci	r21, 0x00	; 0
 b3a:	c1 f7       	brne	.-16     	; 0xb2c <ldexp+0x18>
 b3c:	9e 3f       	cpi	r25, 0xFE	; 254
 b3e:	51 05       	cpc	r21, r1
 b40:	2c f7       	brge	.-54     	; 0xb0c <__stack+0xd>
 b42:	88 0f       	add	r24, r24
 b44:	91 1d       	adc	r25, r1
 b46:	96 95       	lsr	r25
 b48:	87 95       	ror	r24
 b4a:	97 f9       	bld	r25, 7
 b4c:	08 95       	ret
 b4e:	5f 3f       	cpi	r21, 0xFF	; 255
 b50:	ac f0       	brlt	.+42     	; 0xb7c <ldexp+0x68>
 b52:	98 3e       	cpi	r25, 0xE8	; 232
 b54:	9c f0       	brlt	.+38     	; 0xb7c <ldexp+0x68>
 b56:	bb 27       	eor	r27, r27
 b58:	86 95       	lsr	r24
 b5a:	77 95       	ror	r23
 b5c:	67 95       	ror	r22
 b5e:	b7 95       	ror	r27
 b60:	08 f4       	brcc	.+2      	; 0xb64 <ldexp+0x50>
 b62:	b1 60       	ori	r27, 0x01	; 1
 b64:	93 95       	inc	r25
 b66:	c1 f7       	brne	.-16     	; 0xb58 <ldexp+0x44>
 b68:	bb 0f       	add	r27, r27
 b6a:	58 f7       	brcc	.-42     	; 0xb42 <ldexp+0x2e>
 b6c:	11 f4       	brne	.+4      	; 0xb72 <ldexp+0x5e>
 b6e:	60 ff       	sbrs	r22, 0
 b70:	e8 cf       	rjmp	.-48     	; 0xb42 <ldexp+0x2e>
 b72:	6f 5f       	subi	r22, 0xFF	; 255
 b74:	7f 4f       	sbci	r23, 0xFF	; 255
 b76:	8f 4f       	sbci	r24, 0xFF	; 255
 b78:	9f 4f       	sbci	r25, 0xFF	; 255
 b7a:	e3 cf       	rjmp	.-58     	; 0xb42 <ldexp+0x2e>
 b7c:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 b80:	16 f0       	brts	.+4      	; 0xb86 <ldexp+0x72>
 b82:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_mpack>
 b86:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>
 b8a:	68 94       	set
 b8c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>

00000b90 <log>:
 b90:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_splitA>
 b94:	a8 f3       	brcs	.-22     	; 0xb80 <ldexp+0x6c>
 b96:	99 23       	and	r25, r25
 b98:	c1 f3       	breq	.-16     	; 0xb8a <ldexp+0x76>
 b9a:	ae f3       	brts	.-22     	; 0xb86 <ldexp+0x72>
 b9c:	df 93       	push	r29
 b9e:	cf 93       	push	r28
 ba0:	1f 93       	push	r17
 ba2:	0f 93       	push	r16
 ba4:	ff 92       	push	r15
 ba6:	c9 2f       	mov	r28, r25
 ba8:	dd 27       	eor	r29, r29
 baa:	88 23       	and	r24, r24
 bac:	2a f0       	brmi	.+10     	; 0xbb8 <log+0x28>
 bae:	21 97       	sbiw	r28, 0x01	; 1
 bb0:	66 0f       	add	r22, r22
 bb2:	77 1f       	adc	r23, r23
 bb4:	88 1f       	adc	r24, r24
 bb6:	da f7       	brpl	.-10     	; 0xbae <log+0x1e>
 bb8:	20 e0       	ldi	r18, 0x00	; 0
 bba:	30 e0       	ldi	r19, 0x00	; 0
 bbc:	40 e8       	ldi	r20, 0x80	; 128
 bbe:	5f eb       	ldi	r21, 0xBF	; 191
 bc0:	9f e3       	ldi	r25, 0x3F	; 63
 bc2:	88 39       	cpi	r24, 0x98	; 152
 bc4:	20 f0       	brcs	.+8      	; 0xbce <log+0x3e>
 bc6:	80 3e       	cpi	r24, 0xE0	; 224
 bc8:	38 f0       	brcs	.+14     	; 0xbd8 <log+0x48>
 bca:	21 96       	adiw	r28, 0x01	; 1
 bcc:	8f 77       	andi	r24, 0x7F	; 127
 bce:	0e 94 be 02 	call	0x57c	; 0x57c <__addsf3>
 bd2:	e4 ed       	ldi	r30, 0xD4	; 212
 bd4:	f0 e0       	ldi	r31, 0x00	; 0
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <log+0x50>
 bd8:	0e 94 be 02 	call	0x57c	; 0x57c <__addsf3>
 bdc:	e1 e0       	ldi	r30, 0x01	; 1
 bde:	f1 e0       	ldi	r31, 0x01	; 1
 be0:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_powser>
 be4:	8b 01       	movw	r16, r22
 be6:	be 01       	movw	r22, r28
 be8:	ec 01       	movw	r28, r24
 bea:	fb 2e       	mov	r15, r27
 bec:	6f 57       	subi	r22, 0x7F	; 127
 bee:	71 09       	sbc	r23, r1
 bf0:	75 95       	asr	r23
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 0b       	sbc	r24, r24
 bf6:	99 0b       	sbc	r25, r25
 bf8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__floatsisf>
 bfc:	28 e1       	ldi	r18, 0x18	; 24
 bfe:	32 e7       	ldi	r19, 0x72	; 114
 c00:	41 e3       	ldi	r20, 0x31	; 49
 c02:	5f e3       	ldi	r21, 0x3F	; 63
 c04:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3x>
 c08:	af 2d       	mov	r26, r15
 c0a:	98 01       	movw	r18, r16
 c0c:	ae 01       	movw	r20, r28
 c0e:	ff 90       	pop	r15
 c10:	0f 91       	pop	r16
 c12:	1f 91       	pop	r17
 c14:	cf 91       	pop	r28
 c16:	df 91       	pop	r29
 c18:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__addsf3x>
 c1c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>

00000c20 <modf>:
 c20:	fa 01       	movw	r30, r20
 c22:	dc 01       	movw	r26, r24
 c24:	aa 0f       	add	r26, r26
 c26:	bb 1f       	adc	r27, r27
 c28:	9b 01       	movw	r18, r22
 c2a:	ac 01       	movw	r20, r24
 c2c:	bf 57       	subi	r27, 0x7F	; 127
 c2e:	28 f4       	brcc	.+10     	; 0xc3a <modf+0x1a>
 c30:	22 27       	eor	r18, r18
 c32:	33 27       	eor	r19, r19
 c34:	44 27       	eor	r20, r20
 c36:	50 78       	andi	r21, 0x80	; 128
 c38:	20 c0       	rjmp	.+64     	; 0xc7a <modf+0x5a>
 c3a:	b7 51       	subi	r27, 0x17	; 23
 c3c:	90 f4       	brcc	.+36     	; 0xc62 <modf+0x42>
 c3e:	ab 2f       	mov	r26, r27
 c40:	00 24       	eor	r0, r0
 c42:	46 95       	lsr	r20
 c44:	37 95       	ror	r19
 c46:	27 95       	ror	r18
 c48:	01 1c       	adc	r0, r1
 c4a:	a3 95       	inc	r26
 c4c:	d2 f3       	brmi	.-12     	; 0xc42 <modf+0x22>
 c4e:	00 20       	and	r0, r0
 c50:	71 f0       	breq	.+28     	; 0xc6e <modf+0x4e>
 c52:	22 0f       	add	r18, r18
 c54:	33 1f       	adc	r19, r19
 c56:	44 1f       	adc	r20, r20
 c58:	b3 95       	inc	r27
 c5a:	da f3       	brmi	.-10     	; 0xc52 <modf+0x32>
 c5c:	0e d0       	rcall	.+28     	; 0xc7a <modf+0x5a>
 c5e:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__subsf3>
 c62:	61 30       	cpi	r22, 0x01	; 1
 c64:	71 05       	cpc	r23, r1
 c66:	a0 e8       	ldi	r26, 0x80	; 128
 c68:	8a 07       	cpc	r24, r26
 c6a:	b9 46       	sbci	r27, 0x69	; 105
 c6c:	30 f4       	brcc	.+12     	; 0xc7a <modf+0x5a>
 c6e:	9b 01       	movw	r18, r22
 c70:	ac 01       	movw	r20, r24
 c72:	66 27       	eor	r22, r22
 c74:	77 27       	eor	r23, r23
 c76:	88 27       	eor	r24, r24
 c78:	90 78       	andi	r25, 0x80	; 128
 c7a:	30 96       	adiw	r30, 0x00	; 0
 c7c:	21 f0       	breq	.+8      	; 0xc86 <modf+0x66>
 c7e:	20 83       	st	Z, r18
 c80:	31 83       	std	Z+1, r19	; 0x01
 c82:	42 83       	std	Z+2, r20	; 0x02
 c84:	53 83       	std	Z+3, r21	; 0x03
 c86:	08 95       	ret

00000c88 <__fp_mpack>:
 c88:	9f 3f       	cpi	r25, 0xFF	; 255
 c8a:	31 f0       	breq	.+12     	; 0xc98 <__fp_mpack_finite+0xc>

00000c8c <__fp_mpack_finite>:
 c8c:	91 50       	subi	r25, 0x01	; 1
 c8e:	20 f4       	brcc	.+8      	; 0xc98 <__fp_mpack_finite+0xc>
 c90:	87 95       	ror	r24
 c92:	77 95       	ror	r23
 c94:	67 95       	ror	r22
 c96:	b7 95       	ror	r27
 c98:	88 0f       	add	r24, r24
 c9a:	91 1d       	adc	r25, r1
 c9c:	96 95       	lsr	r25
 c9e:	87 95       	ror	r24
 ca0:	97 f9       	bld	r25, 7
 ca2:	08 95       	ret

00000ca4 <__divmodhi4>:
 ca4:	97 fb       	bst	r25, 7
 ca6:	07 2e       	mov	r0, r23
 ca8:	16 f4       	brtc	.+4      	; 0xcae <__divmodhi4+0xa>
 caa:	00 94       	com	r0
 cac:	07 d0       	rcall	.+14     	; 0xcbc <__divmodhi4_neg1>
 cae:	77 fd       	sbrc	r23, 7
 cb0:	09 d0       	rcall	.+18     	; 0xcc4 <__divmodhi4_neg2>
 cb2:	0e 94 66 06 	call	0xccc	; 0xccc <__udivmodhi4>
 cb6:	07 fc       	sbrc	r0, 7
 cb8:	05 d0       	rcall	.+10     	; 0xcc4 <__divmodhi4_neg2>
 cba:	3e f4       	brtc	.+14     	; 0xcca <__divmodhi4_exit>

00000cbc <__divmodhi4_neg1>:
 cbc:	90 95       	com	r25
 cbe:	81 95       	neg	r24
 cc0:	9f 4f       	sbci	r25, 0xFF	; 255
 cc2:	08 95       	ret

00000cc4 <__divmodhi4_neg2>:
 cc4:	70 95       	com	r23
 cc6:	61 95       	neg	r22
 cc8:	7f 4f       	sbci	r23, 0xFF	; 255

00000cca <__divmodhi4_exit>:
 cca:	08 95       	ret

00000ccc <__udivmodhi4>:
 ccc:	aa 1b       	sub	r26, r26
 cce:	bb 1b       	sub	r27, r27
 cd0:	51 e1       	ldi	r21, 0x11	; 17
 cd2:	07 c0       	rjmp	.+14     	; 0xce2 <__udivmodhi4_ep>

00000cd4 <__udivmodhi4_loop>:
 cd4:	aa 1f       	adc	r26, r26
 cd6:	bb 1f       	adc	r27, r27
 cd8:	a6 17       	cp	r26, r22
 cda:	b7 07       	cpc	r27, r23
 cdc:	10 f0       	brcs	.+4      	; 0xce2 <__udivmodhi4_ep>
 cde:	a6 1b       	sub	r26, r22
 ce0:	b7 0b       	sbc	r27, r23

00000ce2 <__udivmodhi4_ep>:
 ce2:	88 1f       	adc	r24, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	5a 95       	dec	r21
 ce8:	a9 f7       	brne	.-22     	; 0xcd4 <__udivmodhi4_loop>
 cea:	80 95       	com	r24
 cec:	90 95       	com	r25
 cee:	bc 01       	movw	r22, r24
 cf0:	cd 01       	movw	r24, r26
 cf2:	08 95       	ret

00000cf4 <_exit>:
 cf4:	f8 94       	cli

00000cf6 <__stop_program>:
 cf6:	ff cf       	rjmp	.-2      	; 0xcf6 <__stop_program>
